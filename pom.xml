<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.5.0</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.example</groupId>
	<artifactId>UrlShortner</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>UrlShortner</name>
	<description>UrlShortner project in Spring Boot</description>
	<url/>
	<licenses>
		<license/>
	</licenses>
	<developers>
		<developer/>
	</developers>
	<scm>
		<connection/>
		<developerConnection/>
		<tag/>
		<url/>
	</scm>
	<properties>
		<java.version>17</java.version>
		<maven.compiler.source>17</maven.compiler.source>
		<maven.compiler.target>17</maven.compiler.target>
		<grpc.version>1.58.0</grpc.version>
		<protobuf.version>3.24.4</protobuf.version>
	</properties>

	<dependencies>
		<!-- spring-boot-starter-web: Provides everything needed for building web applications,
		including an embedded Tomcat server and Spring MVC. This is what enables the @Controller and
		@GetMapping annotations you saw earlier. -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<!-- spring-boot-starter-data-redis: Facilitates integration with Redis, a popular in-memory data
		structure store, often used for caching or session management in Spring applications.
		This is used to store the short URL mappings. -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-redis</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>

		<!-- jedis: This is a Java client library for Redis, providing a way for your application
		to interact with a Redis server. -->
		<dependency>
			<groupId>redis.clients</groupId>
			<artifactId>jedis</artifactId>
		</dependency>

		<!-- gRPC Dependencies
		 grpc-spring-boot-starter (from net.devh): This is a third-party starter that simplifies integrating gRPC
		 with Spring Boot, providing auto-configuration and Spring-specific features for gRPC servers and clients.-->
		<dependency>
			<groupId>net.devh</groupId>
			<artifactId>grpc-spring-boot-starter</artifactId>
			<version>2.15.0.RELEASE</version>
		</dependency>
		<!-- grpc-netty-shaded: The Netty transport layer for gRPC, which handles the actual network communication.
		 shaded means it bundles its dependencies to avoid conflicts.-->
		<dependency>
			<groupId>io.grpc</groupId>
			<artifactId>grpc-netty-shaded</artifactId>
			<version>${grpc.version}</version>
		</dependency>
		<!-- grpc-protobuf: Provides classes for working with Protocol Buffers data within gRPC. -->
		<dependency>
			<groupId>io.grpc</groupId>
			<artifactId>grpc-protobuf</artifactId>
			<version>${grpc.version}</version>
		</dependency>
		<!-- grpc-stub: Contains classes for generated gRPC service stubs (like UrlShortenerServiceBlockingStub in the
		client code) and helpers for making RPC calls. -->
		<dependency>
			<groupId>io.grpc</groupId>
			<artifactId>grpc-stub</artifactId>
			<version>${grpc.version}</version>
		</dependency>

		<!-- protobuf-java: The core Java library for Protocol Buffers, a language-agnostic, platform-agnostic,
		extensible mechanism for serializing structured data. This is used for defining the service
		contracts for gRPC. -->
		<dependency>
			<groupId>com.google.protobuf</groupId>
			<artifactId>protobuf-java</artifactId>
			<version>${protobuf.version}</version>
		</dependency>
		<!-- javax.annotation-api: Provides annotations for common semantic concepts,
		often used by generated code (like gRPC stubs). -->
		<dependency>
			<groupId>javax.annotation</groupId>
			<artifactId>javax.annotation-api</artifactId>
			<version>1.3.2</version>
		</dependency>
	</dependencies>

	<build>
		<extensions>
			<!-- os-maven-plugin (from kr.motd.maven): This plugin detects the operating system and architecture
			 of the build environment. This is particularly useful for gRPC and Protobuf,
			 as it helps in downloading the correct native executables (protoc) for different operating systems. -->
			<extension>
				<groupId>kr.motd.maven</groupId>
				<artifactId>os-maven-plugin</artifactId>
				<version>1.7.0</version>
			</extension>
		</extensions>
		<plugins>
			<!-- spring-boot-maven-plugin: This is a crucial plugin for Spring Boot applications.
			It packages your project into an executable JAR or WAR file,
			making it easy to run your Spring Boot application. -->
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<!-- maven-compiler-plugin: This standard Maven plugin compiles the Java source code. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.11.0</version>
				<configuration>
					<source>17</source>
					<target>17</target>
					<release>17</release>
				</configuration>
			</plugin>
 			<!-- protobuf-maven-plugin (from org.xolstice.maven.plugins): This highly important plugin is
 			 responsible for compiling .proto files into Java source code.-->
			<plugin>
				<groupId>org.xolstice.maven.plugins</groupId>
				<artifactId>protobuf-maven-plugin</artifactId>
				<version>0.6.1</version>
				<configuration>
					<protocArtifact>com.google.protobuf:protoc:${protobuf.version}:exe:${os.detected.classifier}</protocArtifact>
					<pluginId>grpc-java</pluginId>
					<pluginArtifact>io.grpc:protoc-gen-grpc-java:${grpc.version}:exe:${os.detected.classifier}</pluginArtifact>
				</configuration>
				<!-- <executions>: Defines when and how the plugin should run.
				<goal>compile</goal>: Compiles .proto files into standard Protocol Buffer Java classes.
				<goal>compile-custom</goal>: Generates the gRPC-specific service interfaces and stubs based on
				 .proto definitions.-->
				<executions>
					<execution>
						<goals>
							<goal>compile</goal>
							<goal>compile-custom</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

</project>
